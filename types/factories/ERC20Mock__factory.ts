/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC20Mock, ERC20MockInterface } from "../ERC20Mock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001d4538038062001d458339818101604052810190620000379190620002bc565b81818160039080519060200190620000519291906200019a565b5080600490805190602001906200006a9291906200019a565b5050506200008d62000081620000c960201b60201c565b620000d160201b60201c565b620000c17f430345ac05e2b7c9fb4d0e94abb27b516e608f22e33b89b53a2e24abdb18df8560001b6200019760201b60201c565b50506200049f565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50565b828054620001a890620003c4565b90600052602060002090601f016020900481019282620001cc576000855562000218565b82601f10620001e757805160ff191683800117855562000218565b8280016001018555821562000218579182015b8281111562000217578251825591602001919060010190620001fa565b5b5090506200022791906200022b565b5090565b5b80821115620002465760008160009055506001016200022c565b5090565b6000620002616200025b8462000358565b6200032f565b9050828152602081018484840111156200027a57600080fd5b620002878482856200038e565b509392505050565b600082601f830112620002a157600080fd5b8151620002b38482602086016200024a565b91505092915050565b60008060408385031215620002d057600080fd5b600083015167ffffffffffffffff811115620002eb57600080fd5b620002f9858286016200028f565b925050602083015167ffffffffffffffff8111156200031757600080fd5b62000325858286016200028f565b9150509250929050565b60006200033b6200034e565b9050620003498282620003fa565b919050565b6000604051905090565b600067ffffffffffffffff8211156200037657620003756200045f565b5b62000381826200048e565b9050602081019050919050565b60005b83811015620003ae57808201518184015260208101905062000391565b83811115620003be576000848401525b50505050565b60006002820490506001821680620003dd57607f821691505b60208210811415620003f457620003f362000430565b5b50919050565b62000405826200048e565b810181811067ffffffffffffffff821117156200042757620004266200045f565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61189680620004af6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d714610276578063a9059cbb146102a6578063dd62ed3e146102d6578063f2fde38b14610306576100f5565b806370a0823114610200578063715018a6146102305780638da5cb5b1461023a57806395d89b4114610258576100f5565b806323b872dd116100d357806323b872dd14610166578063313ce5671461019657806339509351146101b457806340c10f19146101e4576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b610102610322565b60405161010f919061125b565b60405180910390f35b610132600480360381019061012d9190611016565b6103b4565b60405161013f9190611240565b60405180910390f35b6101506103d7565b60405161015d91906113bd565b60405180910390f35b610180600480360381019061017b9190610fc7565b6103e1565b60405161018d9190611240565b60405180910390f35b61019e610410565b6040516101ab91906113d8565b60405180910390f35b6101ce60048036038101906101c99190611016565b610419565b6040516101db9190611240565b60405180910390f35b6101fe60048036038101906101f99190611016565b610450565b005b61021a60048036038101906102159190610f62565b6104ea565b60405161022791906113bd565b60405180910390f35b610238610532565b005b610242610546565b60405161024f9190611225565b60405180910390f35b610260610570565b60405161026d919061125b565b60405180910390f35b610290600480360381019061028b9190611016565b610602565b60405161029d9190611240565b60405180910390f35b6102c060048036038101906102bb9190611016565b610679565b6040516102cd9190611240565b60405180910390f35b6102f060048036038101906102eb9190610f8b565b61069c565b6040516102fd91906113bd565b60405180910390f35b610320600480360381019061031b9190610f62565b610723565b005b606060038054610331906114ed565b80601f016020809104026020016040519081016040528092919081815260200182805461035d906114ed565b80156103aa5780601f1061037f576101008083540402835291602001916103aa565b820191906000526020600020905b81548152906001019060200180831161038d57829003601f168201915b5050505050905090565b6000806103bf6107a7565b90506103cc8185856107af565b600191505092915050565b6000600254905090565b6000806103ec6107a7565b90506103f985828561097a565b610404858585610a06565b60019150509392505050565b60006012905090565b6000806104246107a7565b9050610445818585610436858961069c565b610440919061140f565b6107af565b600191505092915050565b610458610c87565b6104847ff25d527920f60dbb586e80a8914bd757c47d71af6ae21989456919d6d9bcf44760001b610d05565b6104b07fdb48c754c8d00bec2cced1848739e0412b1f8b49339b221c27a907eac5a6c5e960001b610d05565b6104dc7f40620410909d6945e53d6500d865ec6f5597eb6566395da50d1cde1e55a2313f60001b610d05565b6104e68282610d08565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61053a610c87565b6105446000610e68565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461057f906114ed565b80601f01602080910402602001604051908101604052809291908181526020018280546105ab906114ed565b80156105f85780601f106105cd576101008083540402835291602001916105f8565b820191906000526020600020905b8154815290600101906020018083116105db57829003601f168201915b5050505050905090565b60008061060d6107a7565b9050600061061b828661069c565b905083811015610660576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106579061137d565b60405180910390fd5b61066d82868684036107af565b60019250505092915050565b6000806106846107a7565b9050610691818585610a06565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61072b610c87565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561079b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107929061129d565b60405180910390fd5b6107a481610e68565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561081f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108169061135d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561088f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610886906112bd565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161096d91906113bd565b60405180910390a3505050565b6000610986848461069c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610a0057818110156109f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e9906112dd565b60405180910390fd5b6109ff84848484036107af565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6d9061133d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610add9061127d565b60405180910390fd5b610af1838383610f2e565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6e906112fd565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c0a919061140f565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c6e91906113bd565b60405180910390a3610c81848484610f33565b50505050565b610c8f6107a7565b73ffffffffffffffffffffffffffffffffffffffff16610cad610546565b73ffffffffffffffffffffffffffffffffffffffff1614610d03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfa9061131d565b60405180910390fd5b565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6f9061139d565b60405180910390fd5b610d8460008383610f2e565b8060026000828254610d96919061140f565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610deb919061140f565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e5091906113bd565b60405180910390a3610e6460008383610f33565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b600081359050610f4781611832565b92915050565b600081359050610f5c81611849565b92915050565b600060208284031215610f7457600080fd5b6000610f8284828501610f38565b91505092915050565b60008060408385031215610f9e57600080fd5b6000610fac85828601610f38565b9250506020610fbd85828601610f38565b9150509250929050565b600080600060608486031215610fdc57600080fd5b6000610fea86828701610f38565b9350506020610ffb86828701610f38565b925050604061100c86828701610f4d565b9150509250925092565b6000806040838503121561102957600080fd5b600061103785828601610f38565b925050602061104885828601610f4d565b9150509250929050565b61105b81611465565b82525050565b61106a81611477565b82525050565b600061107b826113f3565b61108581856113fe565b93506110958185602086016114ba565b61109e8161157d565b840191505092915050565b60006110b66023836113fe565b91506110c18261158e565b604082019050919050565b60006110d96026836113fe565b91506110e4826115dd565b604082019050919050565b60006110fc6022836113fe565b91506111078261162c565b604082019050919050565b600061111f601d836113fe565b915061112a8261167b565b602082019050919050565b60006111426026836113fe565b915061114d826116a4565b604082019050919050565b60006111656020836113fe565b9150611170826116f3565b602082019050919050565b60006111886025836113fe565b91506111938261171c565b604082019050919050565b60006111ab6024836113fe565b91506111b68261176b565b604082019050919050565b60006111ce6025836113fe565b91506111d9826117ba565b604082019050919050565b60006111f1601f836113fe565b91506111fc82611809565b602082019050919050565b611210816114a3565b82525050565b61121f816114ad565b82525050565b600060208201905061123a6000830184611052565b92915050565b60006020820190506112556000830184611061565b92915050565b600060208201905081810360008301526112758184611070565b905092915050565b60006020820190508181036000830152611296816110a9565b9050919050565b600060208201905081810360008301526112b6816110cc565b9050919050565b600060208201905081810360008301526112d6816110ef565b9050919050565b600060208201905081810360008301526112f681611112565b9050919050565b6000602082019050818103600083015261131681611135565b9050919050565b6000602082019050818103600083015261133681611158565b9050919050565b600060208201905081810360008301526113568161117b565b9050919050565b600060208201905081810360008301526113768161119e565b9050919050565b60006020820190508181036000830152611396816111c1565b9050919050565b600060208201905081810360008301526113b6816111e4565b9050919050565b60006020820190506113d26000830184611207565b92915050565b60006020820190506113ed6000830184611216565b92915050565b600081519050919050565b600082825260208201905092915050565b600061141a826114a3565b9150611425836114a3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561145a5761145961151f565b5b828201905092915050565b600061147082611483565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156114d85780820151818401526020810190506114bd565b838111156114e7576000848401525b50505050565b6000600282049050600182168061150557607f821691505b602082108114156115195761151861154e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61183b81611465565b811461184657600080fd5b50565b611852816114a3565b811461185d57600080fd5b5056fea2646970667358221220379e6f9ff2667ed9d2219e816e6a74be39b4c37c1956044804e01270101799b364736f6c63430008040033";

export class ERC20Mock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20Mock> {
    return super.deploy(name, symbol, overrides || {}) as Promise<ERC20Mock>;
  }
  getDeployTransaction(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  attach(address: string): ERC20Mock {
    return super.attach(address) as ERC20Mock;
  }
  connect(signer: Signer): ERC20Mock__factory {
    return super.connect(signer) as ERC20Mock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20MockInterface {
    return new utils.Interface(_abi) as ERC20MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Mock {
    return new Contract(address, _abi, signerOrProvider) as ERC20Mock;
  }
}
