/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FlashBorrowerMock,
  FlashBorrowerMockInterface,
} from "../FlashBorrowerMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC3156FlashLender",
        name: "lender_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "enum FlashBorrowerMock.Action",
        name: "key",
        type: "uint8",
      },
    ],
    name: "flashBorrow",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onFlashLoan",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_share",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001c9e38038062001c9e833981810160405281019062000037919062000134565b6200006b7f3b6b1d3d6427c4d11ad91bbcb493f83af9611a30cd556cb8228e3b218669bb3560001b6200011a60201b60201c565b6200009f7fb5fd550a8aaef844d7f0793b6d6468d1676d029875642047d49da00da299f70460001b6200011a60201b60201c565b620000d37fd52660bd460540ef1db8daeb9ece0d79e0af72c6d355dc4ceff7cb72752bef4260001b6200011a60201b60201c565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001c2565b50565b6000815190506200012e81620001a8565b92915050565b6000602082840312156200014757600080fd5b600062000157848285016200011d565b91505092915050565b60006200016d8262000188565b9050919050565b6000620001818262000160565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001b38162000174565b8114620001bf57600080fd5b50565b611acc80620001d26000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806323e30c8b14610051578063dc4a790014610081578063f18d03cc1461009d578063f940e385146100b9575b600080fd5b61006b60048036038101906100669190611476565b6100d5565b6040516100789190611733565b60405180910390f35b61009b60048036038101906100969190611508565b61082e565b005b6100b760048036038101906100b29190611413565b6110f1565b005b6100d360048036038101906100ce91906113d7565b61120c565b005b60006101037fdbb71ad32ec549acf8d8535714608de73848560cfd79e18e458c4eeeacfba26360001b611321565b61012f7f6f62bb7175dd3a5e9d14f80d8c98db09bb7328e797823da4e7deb774a77391a860001b611321565b61015b7f4942804107310f1bcb46a0eb0c1b253636a72fac8e79605a656a3825774b167a60001b611321565b60006101897f88e72760f000cb0cc1ba53b0b05e85d1cdb446ff719bb4a5096ed394f673563e60001b611321565b6101b57f8b33ae884abdc0ac6d4f7939b1d84611838846a5b7985cb7849e92d818f205c460001b611321565b6101e17fd090a0d8c7a323c411ff5371f49bd407240bf7d4c7478a6eb0cf7ed3ce432d6560001b611321565b3073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461024f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610246906117b5565b60405180910390fd5b61027b7fcc777b9be0dfae6bea5fe9dc5525eca1093567afcdf2bf7911820fb0f65b74a560001b611321565b6102a77fa3c2093317fbe641c833ac31d79227bafec4aefd4e27469b57072198d1ea8d6060001b611321565b6102d37fa024fd39b19781c98dadff62d7bc180fc2e3ede95bdc17be298d63cac792ffb260001b611321565b6102ff7f8fe0f8dfa140fee277f7bcdfbd3bdbad413b20683e0cde178a3c9255a2c3336360001b611321565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610384906117d5565b60405180910390fd5b6103b97fd69c29a582170ba77f18754d8607469f6d3d0e59477ed1cd57d440efafa6870860001b611321565b6103e57fe824a4e58907725499a70e80f765b390944553434c060081ef788b09c5ffc5f260001b611321565b6104117fc96a256b9613abad526084d6c08b313d66312a819e57123af9193b8ca22d3b8460001b611321565b600084848101906104229190611580565b90506104507fd0173ffd1c3d5d99bfab5bf8a5fe3623635dd116acfed1ffbd9eb67c2ee9f0a160001b611321565b61047c7fe853fbcbcd0a7cb9d9917f15aeb75196a4f0ce7c0830028fd814f7c0a3e0087160001b611321565b600060028111156104b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160028111156104ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156105a1576105217fb7b90941fec2db58129a158c7cb1f85c7e169a585ff1c18081270c56a2c0650760001b611321565b61054d7fafbf91510531e0fe80b9d9992a3e921f89cc2217be363604a1b18b04d2d8808660001b611321565b6105797fc305cd91ef5a58d4c5b857599a4a09e4c84716657680d80794b51de28f39bcdf60001b611321565b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd991506107c7565b6105cd7f3d07adc69c8bc57ff8692f5ccc08b80d4c89cb075b251f161cb1f6a322b0fc7560001b611321565b6105f97f4ac378ef6764ae142dc60807c5a1901553699d2feccbd581f59ba4354f87863e60001b611321565b60016002811115610633577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600281111561066c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561071e5761069e7fdbcc74211975067af1f0b37e72966fdbd084d626a85d505dec85226a289a04f360001b611321565b6106ca7f6ea6770aa08542c75a2658ec468fd8a328c6d194ef4b6f545e4cd2b230aff50360001b611321565b6106f67f58e99f86110da5798d595eaa1918e967408506c5de51313438530065e2c592a460001b611321565b7f49532a5f05ea72802220479ad080a87868d40922c7a445d10ab5219ff17bbc3191506107c6565b61074a7f332cf23dd2264d81a61f0ce67854e25ebbd4d8a4f0d287130c3dceee3027d81060001b611321565b6107767f18c44e6395a3d9160af9383df39d5bfa92ace4f41631e6c74081b17d4a4c4da560001b611321565b6107a27f3c73394e5ddef7f8ee136435230baa05c367abaa12fb0008eb7486fac772271560001b611321565b7f49532a5f05ea72802220479ad080a87868d40922c7a445d10ab5219ff17bbc3191505b5b6107f37f921bf3e0ca43b84efeac338f1e928c4939ece77a9db0479cd0775c0b6c63dad460001b611321565b61081f7f98707abd0a9ac8e7fc6bd0d651985be8b08911753eaefcdfe80030b4f44452de60001b611321565b81925050509695505050505050565b61085a7f39e702a7e3866e40e544135bba95cf154616e2feeeee2fa5c6e1ee1b1e6bd34860001b611321565b6108867f94cde7ae9531c12cfb8558525fcc4d6b7fcb36aaf518b98b75ee032473e2981160001b611321565b6108b27fb3c7b13e80ebafc23f8c071290664fcc7679fd4e259ae542a7b54c19b16c102060001b611321565b60606108e07f0d83c60f07584c307d5870b78cf0159cacbce0292f89bfb24911427f463c42c660001b611321565b61090c7f39b8f5dd466ab57d842c4687d2923b48d37bfc916e8b1bc74795cd44a6f55b3d60001b611321565b60006002811115610946577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82600281111561097f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610a31576109b17fa28d725cfb30352bc607288ea4207cd1f927d46c4ed8a391a364515f40f7996060001b611321565b6109dd7faa261b1b9d0bd5260a82bf28314ba0053f5affac8d2278549056c80d1c9f705b60001b611321565b610a097f562c57f649f907b0212182cf967404b023c223e92d025408f31fc1d9683ce6cf60001b611321565b6000604051602001610a1b919061179a565b6040516020818303038152906040529050610c56565b610a5d7fb6ae8efb06dd1ec71dca553d58b8ed3f4c10128f5ff3df4bf60da600a14405a660001b611321565b610a897f9e3a42ae20d671a7b4a15c8a85c214d882613727498138d7c1f3f54ac85cc81860001b611321565b60016002811115610ac3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826002811115610afc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610bae57610b2e7f2e61f3c0791a1c17aa25b08b70abc99ababa8fe33d7f2a6aec92a3f60a76b87460001b611321565b610b5a7f121a528698070f8d2ee995a3f4df833e61daa24ccbda9bec7462006a6feb0ad960001b611321565b610b867fe9ee31c85e9839470873bf59e8ab78cefef8ef99ec4e2360e9f3e42cd77de01160001b611321565b6001604051602001610b98919061179a565b6040516020818303038152906040529050610c55565b610bda7fc29dd33aef3213f4bee176a53a7435a6737d87090056d79c0def231ede55f73e60001b611321565b610c067fa81ec5a216eef9f312927c5c969c3e043470089e1a8fcbdeeadc73a79dffe41960001b611321565b610c327feebdec7143ee8723265716ac6a2946a1daa970d201a98e9a69e5bb70962a0cc560001b611321565b81604051602001610c43919061179a565b60405160208183030381529060405290505b5b610c827fdd1af24ad3850cf3d889857083b2f6d3159338d19d187c00c77a07840fcd23d960001b611321565b610cae7fa5076c5475e00df102472f7e11d69858d5c2a86d3ba765824a89f2f396a1b7d860001b611321565b60008473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e3060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610d0b92919061169c565b60206040518083038186803b158015610d2357600080fd5b505afa158015610d37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5b91906115a9565b9050610d897f367f6ce919e53b6d6167bfde3814abbeaa454559d010f038feb5df27aa2c4c9060001b611321565b610db57f4459c4284a7ac0811ff08364ca04a5176d97061cfd7c4a013f6ce7c2fee7082660001b611321565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d9d98ce487876040518363ffffffff1660e01b8152600401610e1392919061170a565b60206040518083038186803b158015610e2b57600080fd5b505afa158015610e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6391906115a9565b9050610e917f2b199522aa79d05261102bd9ee9771220ad4d14bf056d0fa3b119a14f935229760001b611321565b610ebd7fcfc84e4d373b57ba4116da84c122a0fb47a5c48bb0ae9914579e4f765aa7e30d60001b611321565b60008186610ecb9190611822565b9050610ef97fdb5855810fa649c1b7d669b084dd8d01b34b6d3f8ee91cc219d2b71ddcd8de5660001b611321565b610f257f7666132752b9dea0f82480871a20b2ed499e185d41da23d0ac9d364a806def5460001b611321565b8673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168386610f6e9190611822565b6040518363ffffffff1660e01b8152600401610f8b92919061170a565b602060405180830381600087803b158015610fa557600080fd5b505af1158015610fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdd9190611557565b5061100a7f3540fd3a725e6d6d943d0362d7f756212efae63f885484f8b099f5888d845da360001b611321565b6110367f1429eda549f17d210c5a40d69ca982800541c1fffde146d0c51a509ecae3303c60001b611321565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635cffe9de308989886040518563ffffffff1660e01b8152600401611095949392919061174e565b602060405180830381600087803b1580156110af57600080fd5b505af11580156110c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e79190611557565b5050505050505050565b61111d7ff84eb64b3fbb8feb24a60014a2924d6d2c5ad0e135750c05f1a850372caf921460001b611321565b6111497f94d4114651d6113a6b587fa7c0cdad16e442608437696f100b7752d87d6af6cb60001b611321565b6111757f92193e062a17a83a18b43bfbad43cb07f6e825c6691b5c0365516ca0ecdfd89b60001b611321565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f18d03cc858585856040518563ffffffff1660e01b81526004016111d494939291906116c5565b600060405180830381600087803b1580156111ee57600080fd5b505af1158015611202573d6000803e3d6000fd5b5050505050505050565b6112387f89884ea0d62abd55bea26aa501b19d4ff043b127bf872fc595b8759f9b77409260001b611321565b6112647f4da266f797b29388f51f3bf8f32da49bd337be263116f3fccc188b0fd347f9cb60001b611321565b6112907f54d471d02ae78c6bf25f3e6ffa934fff3621e236c540cce4393d02b5573c1dcf60001b611321565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f940e38583836040518363ffffffff1660e01b81526004016112eb92919061169c565b600060405180830381600087803b15801561130557600080fd5b505af1158015611319573d6000803e3d6000fd5b505050505050565b50565b60008135905061133381611a41565b92915050565b60008151905061134881611a58565b92915050565b60008083601f84011261136057600080fd5b8235905067ffffffffffffffff81111561137957600080fd5b60208301915083600182028301111561139157600080fd5b9250929050565b6000813590506113a781611a6f565b92915050565b6000813590506113bc81611a7f565b92915050565b6000815190506113d181611a7f565b92915050565b600080604083850312156113ea57600080fd5b60006113f885828601611324565b925050602061140985828601611324565b9150509250929050565b6000806000806080858703121561142957600080fd5b600061143787828801611324565b945050602061144887828801611324565b935050604061145987828801611324565b925050606061146a878288016113ad565b91505092959194509250565b60008060008060008060a0878903121561148f57600080fd5b600061149d89828a01611324565b96505060206114ae89828a01611324565b95505060406114bf89828a016113ad565b94505060606114d089828a016113ad565b935050608087013567ffffffffffffffff8111156114ed57600080fd5b6114f989828a0161134e565b92509250509295509295509295565b60008060006060848603121561151d57600080fd5b600061152b86828701611324565b935050602061153c868287016113ad565b925050604061154d86828701611398565b9150509250925092565b60006020828403121561156957600080fd5b600061157784828501611339565b91505092915050565b60006020828403121561159257600080fd5b60006115a084828501611398565b91505092915050565b6000602082840312156115bb57600080fd5b60006115c9848285016113c2565b91505092915050565b6115db81611878565b82525050565b6115ea81611896565b82525050565b60006115fb826117f5565b6116058185611800565b9350611615818560208601611913565b61161e816119a4565b840191505092915050565b611632816118dd565b82525050565b61164181611901565b82525050565b6000611654602783611811565b915061165f826119b5565b604082019050919050565b6000611677601f83611811565b915061168282611a04565b602082019050919050565b611696816118d3565b82525050565b60006040820190506116b160008301856115d2565b6116be60208301846115d2565b9392505050565b60006080820190506116da60008301876115d2565b6116e760208301866115d2565b6116f460408301856115d2565b611701606083018461168d565b95945050505050565b600060408201905061171f60008301856115d2565b61172c602083018461168d565b9392505050565b600060208201905061174860008301846115e1565b92915050565b60006080820190506117636000830187611629565b61177060208301866115d2565b61177d604083018561168d565b818103606083015261178f81846115f0565b905095945050505050565b60006020820190506117af6000830184611638565b92915050565b600060208201905081810360008301526117ce81611647565b9050919050565b600060208201905081810360008301526117ee8161166a565b9050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061182d826118d3565b9150611838836118d3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561186d5761186c611946565b5b828201905092915050565b6000611883826118b3565b9050919050565b60008115159050919050565b6000819050919050565b60008190506118ae82611a2d565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006118e8826118ef565b9050919050565b60006118fa826118b3565b9050919050565b600061190c826118a0565b9050919050565b60005b83811015611931578082015181840152602081019050611916565b83811115611940576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000601f19601f8301169050919050565b7f466c617368426f72726f7765723a20556e74727573746564206c6f616e20696e60008201527f69746961746f7200000000000000000000000000000000000000000000000000602082015250565b7f466c617368426f72726f7765723a20556e74727573746564206c656e64657200600082015250565b60038110611a3e57611a3d611975565b5b50565b611a4a81611878565b8114611a5557600080fd5b50565b611a618161188a565b8114611a6c57600080fd5b50565b60038110611a7c57600080fd5b50565b611a88816118d3565b8114611a9357600080fd5b5056fea26469706673582212201b8a91ebd3c30c2285446e54016a628e069e53f641da08b43595df42d1ef5fa564736f6c63430008040033";

export class FlashBorrowerMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    lender_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FlashBorrowerMock> {
    return super.deploy(lender_, overrides || {}) as Promise<FlashBorrowerMock>;
  }
  getDeployTransaction(
    lender_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(lender_, overrides || {});
  }
  attach(address: string): FlashBorrowerMock {
    return super.attach(address) as FlashBorrowerMock;
  }
  connect(signer: Signer): FlashBorrowerMock__factory {
    return super.connect(signer) as FlashBorrowerMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FlashBorrowerMockInterface {
    return new utils.Interface(_abi) as FlashBorrowerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FlashBorrowerMock {
    return new Contract(address, _abi, signerOrProvider) as FlashBorrowerMock;
  }
}
