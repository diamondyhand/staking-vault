/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StakingVaultInterface extends ethers.utils.Interface {
  functions: {
    "DAY_TIME()": FunctionFragment;
    "MAX_LOCK_DAYS()": FunctionFragment;
    "MIN_LOCK_DAYS()": FunctionFragment;
    "addRewards(uint256)": FunctionFragment;
    "claimRewards(uint256)": FunctionFragment;
    "compound(uint256,uint256)": FunctionFragment;
    "getClaimableRewards(address,uint256)": FunctionFragment;
    "increaseLock(uint256,uint256,uint256)": FunctionFragment;
    "lock(uint256,uint256)": FunctionFragment;
    "lockFor(address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPause(bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unLock(uint256,uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DAY_TIME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_LOCK_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_LOCK_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "compound",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLock",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockFor",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setPause", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unLock",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "DAY_TIME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LOCK_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_LOCK_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "compound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unLock", data: BytesLike): Result;

  events: {
    "Compounded(address,uint256,uint256)": EventFragment;
    "LockIncreased(address,uint256,uint256,uint256)": EventFragment;
    "Locked(address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RewardsAdded(address,uint256)": EventFragment;
    "RewardsClaimed(address,uint256,uint256)": EventFragment;
    "UnLocked(address,uint256,bool,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Compounded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Locked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type CompoundedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    rewards: BigNumber;
    lockId: BigNumber;
  }
>;

export type LockIncreasedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    user: string;
    amount: BigNumber;
    period: BigNumber;
    lockId: BigNumber;
  }
>;

export type LockedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    user: string;
    amount: BigNumber;
    period: BigNumber;
    lockId: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RewardsAddedEvent = TypedEvent<
  [string, BigNumber] & { user: string; rewards: BigNumber }
>;

export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    rewards: BigNumber;
    lockId: BigNumber;
  }
>;

export type UnLockedEvent = TypedEvent<
  [string, BigNumber, boolean, BigNumber] & {
    user: string;
    amount: BigNumber;
    withRewards: boolean;
    lockId: BigNumber;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class StakingVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingVaultInterface;

  functions: {
    DAY_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_LOCK_DAYS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_LOCK_DAYS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addRewards(
      rewards: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    compound(
      rewards: BigNumberish,
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getClaimableRewards(
      user: string,
      lockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    increaseLock(
      amount: BigNumberish,
      period: BigNumberish,
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lock(
      amount: BigNumberish,
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockFor(
      user: string,
      amount: BigNumberish,
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPause(
      pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unLock(
      amount: BigNumberish,
      lockId: BigNumberish,
      withRewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DAY_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_LOCK_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_LOCK_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

  addRewards(
    rewards: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    lockId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  compound(
    rewards: BigNumberish,
    lockId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getClaimableRewards(
    user: string,
    lockId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseLock(
    amount: BigNumberish,
    period: BigNumberish,
    lockId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lock(
    amount: BigNumberish,
    period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockFor(
    user: string,
    amount: BigNumberish,
    period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPause(
    pause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unLock(
    amount: BigNumberish,
    lockId: BigNumberish,
    withRewards: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DAY_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LOCK_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LOCK_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    addRewards(rewards: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claimRewards(
      lockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    compound(
      rewards: BigNumberish,
      lockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getClaimableRewards(
      user: string,
      lockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseLock(
      amount: BigNumberish,
      period: BigNumberish,
      lockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lock(
      amount: BigNumberish,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockFor(
      user: string,
      amount: BigNumberish,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPause(pause: boolean, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unLock(
      amount: BigNumberish,
      lockId: BigNumberish,
      withRewards: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Compounded(address,uint256,uint256)"(
      user?: string | null,
      rewards?: null,
      lockId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; rewards: BigNumber; lockId: BigNumber }
    >;

    Compounded(
      user?: string | null,
      rewards?: null,
      lockId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; rewards: BigNumber; lockId: BigNumber }
    >;

    "LockIncreased(address,uint256,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      period?: null,
      lockId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { user: string; amount: BigNumber; period: BigNumber; lockId: BigNumber }
    >;

    LockIncreased(
      user?: string | null,
      amount?: null,
      period?: null,
      lockId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { user: string; amount: BigNumber; period: BigNumber; lockId: BigNumber }
    >;

    "Locked(address,uint256,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      period?: null,
      lockId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { user: string; amount: BigNumber; period: BigNumber; lockId: BigNumber }
    >;

    Locked(
      user?: string | null,
      amount?: null,
      period?: null,
      lockId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { user: string; amount: BigNumber; period: BigNumber; lockId: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "RewardsAdded(address,uint256)"(
      user?: string | null,
      rewards?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; rewards: BigNumber }
    >;

    RewardsAdded(
      user?: string | null,
      rewards?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; rewards: BigNumber }
    >;

    "RewardsClaimed(address,uint256,uint256)"(
      user?: string | null,
      rewards?: null,
      lockId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; rewards: BigNumber; lockId: BigNumber }
    >;

    RewardsClaimed(
      user?: string | null,
      rewards?: null,
      lockId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; rewards: BigNumber; lockId: BigNumber }
    >;

    "UnLocked(address,uint256,bool,uint256)"(
      user?: string | null,
      amount?: null,
      withRewards?: null,
      lockId?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean, BigNumber],
      {
        user: string;
        amount: BigNumber;
        withRewards: boolean;
        lockId: BigNumber;
      }
    >;

    UnLocked(
      user?: string | null,
      amount?: null,
      withRewards?: null,
      lockId?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean, BigNumber],
      {
        user: string;
        amount: BigNumber;
        withRewards: boolean;
        lockId: BigNumber;
      }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    DAY_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LOCK_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LOCK_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    addRewards(
      rewards: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewards(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    compound(
      rewards: BigNumberish,
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getClaimableRewards(
      user: string,
      lockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseLock(
      amount: BigNumberish,
      period: BigNumberish,
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lock(
      amount: BigNumberish,
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockFor(
      user: string,
      amount: BigNumberish,
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPause(
      pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unLock(
      amount: BigNumberish,
      lockId: BigNumberish,
      withRewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DAY_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_LOCK_DAYS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_LOCK_DAYS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRewards(
      rewards: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    compound(
      rewards: BigNumberish,
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getClaimableRewards(
      user: string,
      lockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseLock(
      amount: BigNumberish,
      period: BigNumberish,
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lock(
      amount: BigNumberish,
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockFor(
      user: string,
      amount: BigNumberish,
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPause(
      pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unLock(
      amount: BigNumberish,
      lockId: BigNumberish,
      withRewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
