/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VaultInterface extends ethers.utils.Interface {
  functions: {
    "CALLBACK_SUCCESS()": FunctionFragment;
    "allowContract(address,bool)": FunctionFragment;
    "allowedContracts(address)": FunctionFragment;
    "approveContract(address,address,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "decimal()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "emergencyWithdraw(address,address,uint256)": FunctionFragment;
    "feeRate()": FunctionFragment;
    "flashFee(address,uint256)": FunctionFragment;
    "flashLoan(address,address,uint256,bytes)": FunctionFragment;
    "maxFlashLoan(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPause(bool)": FunctionFragment;
    "toShare(address,uint256)": FunctionFragment;
    "toUnderlying(address,uint256)": FunctionFragment;
    "totalAmounts(address)": FunctionFragment;
    "totalShares(address)": FunctionFragment;
    "transfer(address,address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCode(address)": FunctionFragment;
    "updateFlashloanfeeRate(uint256)": FunctionFragment;
    "userShares(address,address)": FunctionFragment;
    "viewShare(address,address)": FunctionFragment;
    "whiteList(address,address)": FunctionFragment;
    "withdraw(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CALLBACK_SUCCESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowContract",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedContracts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveContract",
    values: [string, string, boolean, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "decimal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flashFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxFlashLoan",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setPause", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "toShare",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUnderlying",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAmounts",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "totalShares", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "updateCode", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateFlashloanfeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userShares",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewShare",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteList",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "CALLBACK_SUCCESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateCode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFlashloanfeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "viewShare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whiteList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VaultInterface;

  functions: {
    CALLBACK_SUCCESS(overrides?: CallOverrides): Promise<[string]>;

    allowContract(
      _addr: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approveContract(
      _user: string,
      _contract: string,
      _status: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimal(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _user: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    flashFee(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxFlashLoan(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toShare(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _share: BigNumber }>;

    toUnderlying(
      _token: string,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    totalAmounts(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _user: string,
      _receiver: string,
      _token: string,
      _share: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCode(
      newCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFlashloanfeeRate(
      _feeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userShares(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    viewShare(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    whiteList(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      _user: string,
      _token: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CALLBACK_SUCCESS(overrides?: CallOverrides): Promise<string>;

  allowContract(
    _addr: string,
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowedContracts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  approveContract(
    _user: string,
    _contract: string,
    _status: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimal(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _token: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _user: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeRate(overrides?: CallOverrides): Promise<BigNumber>;

  flashFee(
    _token: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  flashLoan(
    receiver: string,
    token: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxFlashLoan(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPause(
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toShare(
    _token: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toUnderlying(
    _token: string,
    _share: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _user: string,
    _receiver: string,
    _token: string,
    _share: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCode(
    newCode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFlashloanfeeRate(
    _feeRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userShares(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  viewShare(
    _addr: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  whiteList(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    _user: string,
    _token: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CALLBACK_SUCCESS(overrides?: CallOverrides): Promise<string>;

    allowContract(
      _addr: string,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedContracts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    approveContract(
      _user: string,
      _contract: string,
      _status: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    decimal(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      _user: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeRate(overrides?: CallOverrides): Promise<BigNumber>;

    flashFee(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxFlashLoan(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPause(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    toShare(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUnderlying(
      _token: string,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _user: string,
      _receiver: string,
      _token: string,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCode(newCode: string, overrides?: CallOverrides): Promise<void>;

    updateFlashloanfeeRate(
      _feeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userShares(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewShare(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whiteList(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    CALLBACK_SUCCESS(overrides?: CallOverrides): Promise<BigNumber>;

    allowContract(
      _addr: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveContract(
      _user: string,
      _contract: string,
      _status: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimal(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _user: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeRate(overrides?: CallOverrides): Promise<BigNumber>;

    flashFee(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxFlashLoan(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toShare(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUnderlying(
      _token: string,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _user: string,
      _receiver: string,
      _token: string,
      _share: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCode(
      newCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFlashloanfeeRate(
      _feeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userShares(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewShare(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whiteList(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _user: string,
      _token: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CALLBACK_SUCCESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowContract(
      _addr: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveContract(
      _user: string,
      _contract: string,
      _status: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _user: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashFee(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxFlashLoan(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toShare(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUnderlying(
      _token: string,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShares(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      _user: string,
      _receiver: string,
      _token: string,
      _share: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCode(
      newCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFlashloanfeeRate(
      _feeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userShares(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewShare(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whiteList(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _user: string,
      _token: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
